package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/michaelagallo95/bankaccount/graph/model"
)

// CreateBankAccount is the resolver for the createBankAccount field.
func (r *mutationResolver) CreateBankAccount(ctx context.Context, application model.BankApplication) (*model.CreateBankAccountResponse, error) {
	rand, _ := rand.Int(rand.Reader, big.NewInt(100))

	var openingDeposit float64
	// Because openingDeposit is defined as a pointer and optional in the schema
	// The case where it is a nil pointer and dereferencing crashes the program
	// Must be accounted for
	if application.OpeningDeposit != nil {
		openingDeposit = *application.OpeningDeposit
	}
	if openingDeposit < 0 {
		response := model.CreateBankAccountResponse{
			Code:    400,
			Success: false,
			Message: "Attempt to open account with negative opening deposit",
		}

		return &response, nil
	}

	bankAccount := &model.BankAccount{
		Balance: openingDeposit,
		Owner:   &model.Person{Name: application.Applicant.Name, Age: *application.Applicant.Age},
		ID:      fmt.Sprintf("%d", rand),
	}

	r.bankAccounts = append(r.bankAccounts, bankAccount)

	response := model.CreateBankAccountResponse{
		Code:    200,
		Success: true,
		Message: fmt.Sprintf("Successfully created bank account %v for %v with an opening balance of $%v", bankAccount.ID, bankAccount.Owner.Name, bankAccount.Balance),
	}
	return &response, nil
}

// BankAccounts is the resolver for the bankAccounts field.
func (r *queryResolver) BankAccounts(ctx context.Context) ([]*model.BankAccount, error) {
	return r.bankAccounts, nil
}

// BankAccount is the resolver for the BankAccount field.
func (r *queryResolver) BankAccount(ctx context.Context, id string) (*model.BankAccount, error) {
	for _, account := range r.bankAccounts {
		if account.ID == id {
			return account, nil
		}

	}
	return nil, fmt.Errorf("account not found")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
